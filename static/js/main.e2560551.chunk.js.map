{"version":3,"sources":["component/Timer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Timer","useState","Date","today","setDate","useEffect","timer","setInterval","clearInterval","hour","getHours","minute","getMinutes","phrase","wish","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4LAGe,SAASA,IAAQ,MAEHC,mBAAS,IAAIC,MAFV,mBAErBC,EAFqB,KAEdC,EAFc,KAI5BC,qBAAU,WACN,IAAMC,EAAQC,aAAY,WAE1BH,EAAQ,IAAIF,QACX,KACH,OAAO,WACLM,cAAcF,MAEf,IAKH,IAAMG,EAAON,EAAMO,WACbC,EAASR,EAAMS,aAEfC,EAAS,CACb,mCACA,gCACA,0CACA,mCAGIC,EAAI,gBACPL,EAAO,GAAKI,EAAO,IAClBJ,EAAO,IAAOI,EAAO,IACnBJ,EAAO,IAAME,EAAS,IAAQE,EAAO,IACtC,GAAKJ,GAAQ,GAAKE,GAAWE,EAAO,IACvCA,EAAO,IAIT,OACE,8BACE,6BAAMC,M,MC5BCC,MAVf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAChB,EAAD,SCKOiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.e2560551.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n\n\nexport default function Timer() {\n    // const locale = 'fr';\n    const [today, setDate] = useState(new Date()); // Save the current date to be able to trigger an update\n\n    useEffect(() => {\n        const timer = setInterval(() => { // Creates an interval which will update the current data every second\n        // This will trigger a rerender every component that uses the useDate hook.\n        setDate(new Date());\n      }, 1000);\n      return () => {\n        clearInterval(timer); // Return a funtion to clear the timer so that it will stop being called on unmount\n      }\n    }, []);\n\n    // const day = today.toLocaleDateString(locale, { weekday: 'long' });\n    // const date = `${day}, ${today.getDate()} ${today.toLocaleDateString(locale, { month: 'long' })}\\n\\n`;\n\n    const hour = today.getHours();\n    const minute = today.getMinutes();\n\n    const phrase = [\n      \"encore le couvre feu, pas bouger\",\n      \"bon là tu peux te ballader\",\n      \"bientôt le couvre feu, hâte toi !\",\n      \"le couvre feu. Reste chez toi !\"\n    ]\n\n    const wish = `C'est ${\n      (hour < 6 && phrase[0]) ||\n      ( hour < 17  && phrase[1]) ||\n      ( ( hour < 18 && minute < 45 ) && phrase[1]) ||\n      ( (18 > hour && 44 < minute) && phrase[2]) ||\n      phrase[3]}`;\n\n    // const time = today.toLocaleTimeString(locale, { hour: 'numeric', hour24: true, minute: 'numeric', second: 'numeric' });\n\n    return (\n      <div>\n        <h3>{ wish }</h3>\n      </div>\n    );\n  };","import Timer from './component/Timer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Timer />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}